{"ast":null,"code":"import { parseCSV } from '../utils/csvParser';\nimport { loadCompaniesFromStorage, hasAdminChanges } from '../utils/dataStorage';\nimport { isSupabaseConfigured } from '../config/supabase';\nimport { checkMigrationStatus } from '../utils/csvMigration';\nimport { getCachedData, cacheData, isOnline } from '../utils/cacheManager';\nconst COMPANIES_CACHE_KEY = 'allCompanies';\n\n/**\n * Main function to load companies with a cache-first strategy.\n * It will immediately return cached data if available, and then\n * fetch fresh data in the background to update the cache.\n * @param {function} setData - The React state setter to update the component with data.\n */\nexport const loadCompaniesWithCache = setData => {\n  // 1. Try to load from cache for instant UI update\n  const cachedCompanies = getCachedData(COMPANIES_CACHE_KEY);\n  if (cachedCompanies && cachedCompanies.length > 0) {\n    setData(cachedCompanies);\n    console.log('Loaded from cache:', cachedCompanies.length, 'companies');\n    return;\n  }\n\n  // 2. If not in cache, load from Supabase or CSV\n  loadCompaniesFromCSV().then(companies => {\n    cacheData(COMPANIES_CACHE_KEY, companies);\n    setData(companies);\n    console.log('Loaded from source:', companies.length, 'companies');\n  }).catch(error => {\n    console.error('Error loading companies with cache:', error);\n    setData([]); // Set to empty array on error\n  });\n};\n\n// Function to load companies - checks Supabase first, then admin changes, then CSV\nexport const loadCompaniesFromCSV = async () => {\n  try {\n    // If Supabase is configured, try to load from there first\n    if (isSupabaseConfigured()) {\n      console.log('Supabase configured, loading companies from database...');\n      const supabaseCompanies = await loadCompaniesFromStorage();\n      if (supabaseCompanies && supabaseCompanies.length > 0) {\n        console.log('Successfully loaded', supabaseCompanies.length, 'companies from Supabase');\n        return supabaseCompanies;\n      } else {\n        console.log('No companies found in Supabase, checking if migration is needed...');\n\n        // Check if we need to migrate CSV data\n        const status = await checkMigrationStatus();\n        if (status.needsMigration) {\n          console.log('Supabase table is empty, falling back to CSV data');\n          console.log('Consider running the migration utility to populate Supabase');\n        }\n      }\n    }\n\n    // Fallback: Check if admin has made local changes\n    if (hasAdminChanges()) {\n      const adminCompanies = await loadCompaniesFromStorage();\n      if (adminCompanies && adminCompanies.length > 0) {\n        console.log('Loading companies from admin storage:', adminCompanies.length);\n        return adminCompanies;\n      }\n    }\n\n    // Final fallback: Load from CSV\n    console.log('Loading companies from CSV...');\n    const response = await fetch('/mc-network.csv');\n    if (!response.ok) {\n      throw new Error(\"HTTP error! status: \".concat(response.status));\n    }\n    const csvContent = await response.text();\n    console.log('CSV content loaded, length:', csvContent.length);\n\n    // Parse the CSV data\n    const parsedCompanies = parseCSV(csvContent);\n    console.log('Parsed companies:', parsedCompanies.length);\n\n    // Only return CSV companies if we have them\n    if (parsedCompanies.length > 0) {\n      console.log('Successfully loaded', parsedCompanies.length, 'companies from CSV');\n      return parsedCompanies;\n    } else {\n      console.warn('No companies found in CSV');\n      return [];\n    }\n  } catch (error) {\n    console.error('Error loading company data:', error);\n\n    // Emergency fallback: try to load from CSV even if other methods failed\n    try {\n      console.log('Attempting emergency CSV fallback...');\n      const response = await fetch('/mc-network.csv');\n      const csvContent = await response.text();\n      const parsedCompanies = parseCSV(csvContent);\n      console.log('Emergency fallback loaded', parsedCompanies.length, 'companies');\n      return parsedCompanies;\n    } catch (fallbackError) {\n      console.error('Emergency fallback also failed:', fallbackError);\n      return [];\n    }\n  }\n};\n\n// Start with empty array - components will load CSV data on mount\nexport const allCompanies = [];","map":{"version":3,"names":["parseCSV","loadCompaniesFromStorage","hasAdminChanges","isSupabaseConfigured","checkMigrationStatus","getCachedData","cacheData","isOnline","COMPANIES_CACHE_KEY","loadCompaniesWithCache","setData","cachedCompanies","length","console","log","loadCompaniesFromCSV","then","companies","catch","error","supabaseCompanies","status","needsMigration","adminCompanies","response","fetch","ok","Error","concat","csvContent","text","parsedCompanies","warn","fallbackError","allCompanies"],"sources":["/Users/pablognecco/Dropbox (Personal)/Studio/Cursor/network/src/data/companies.js"],"sourcesContent":["import { parseCSV } from '../utils/csvParser';\nimport { loadCompaniesFromStorage, hasAdminChanges } from '../utils/dataStorage';\nimport { isSupabaseConfigured } from '../config/supabase';\nimport { checkMigrationStatus } from '../utils/csvMigration';\nimport { getCachedData, cacheData, isOnline } from '../utils/cacheManager';\n\nconst COMPANIES_CACHE_KEY = 'allCompanies';\n\n/**\n * Main function to load companies with a cache-first strategy.\n * It will immediately return cached data if available, and then\n * fetch fresh data in the background to update the cache.\n * @param {function} setData - The React state setter to update the component with data.\n */\nexport const loadCompaniesWithCache = (setData) => {\n  // 1. Try to load from cache for instant UI update\n  const cachedCompanies = getCachedData(COMPANIES_CACHE_KEY);\n  if (cachedCompanies && cachedCompanies.length > 0) {\n    setData(cachedCompanies);\n    console.log('Loaded from cache:', cachedCompanies.length, 'companies');\n    return;\n  }\n\n  // 2. If not in cache, load from Supabase or CSV\n  loadCompaniesFromCSV().then(companies => {\n    cacheData(COMPANIES_CACHE_KEY, companies);\n    setData(companies);\n    console.log('Loaded from source:', companies.length, 'companies');\n  }).catch(error => {\n    console.error('Error loading companies with cache:', error);\n    setData([]); // Set to empty array on error\n  });\n};\n\n// Function to load companies - checks Supabase first, then admin changes, then CSV\nexport const loadCompaniesFromCSV = async () => {\n  try {\n    // If Supabase is configured, try to load from there first\n    if (isSupabaseConfigured()) {\n      console.log('Supabase configured, loading companies from database...');\n      \n      const supabaseCompanies = await loadCompaniesFromStorage();\n      if (supabaseCompanies && supabaseCompanies.length > 0) {\n        console.log('Successfully loaded', supabaseCompanies.length, 'companies from Supabase');\n        return supabaseCompanies;\n      } else {\n        console.log('No companies found in Supabase, checking if migration is needed...');\n        \n        // Check if we need to migrate CSV data\n        const status = await checkMigrationStatus();\n        if (status.needsMigration) {\n          console.log('Supabase table is empty, falling back to CSV data');\n          console.log('Consider running the migration utility to populate Supabase');\n        }\n      }\n    }\n    \n    // Fallback: Check if admin has made local changes\n    if (hasAdminChanges()) {\n      const adminCompanies = await loadCompaniesFromStorage();\n      if (adminCompanies && adminCompanies.length > 0) {\n        console.log('Loading companies from admin storage:', adminCompanies.length);\n        return adminCompanies;\n      }\n    }\n    \n    // Final fallback: Load from CSV\n    console.log('Loading companies from CSV...');\n    const response = await fetch('/mc-network.csv');\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const csvContent = await response.text();\n    console.log('CSV content loaded, length:', csvContent.length);\n    \n    // Parse the CSV data\n    const parsedCompanies = parseCSV(csvContent);\n    console.log('Parsed companies:', parsedCompanies.length);\n    \n    // Only return CSV companies if we have them\n    if (parsedCompanies.length > 0) {\n      console.log('Successfully loaded', parsedCompanies.length, 'companies from CSV');\n      return parsedCompanies;\n    } else {\n      console.warn('No companies found in CSV');\n      return [];\n    }\n  } catch (error) {\n    console.error('Error loading company data:', error);\n    \n    // Emergency fallback: try to load from CSV even if other methods failed\n    try {\n      console.log('Attempting emergency CSV fallback...');\n      const response = await fetch('/mc-network.csv');\n      const csvContent = await response.text();\n      const parsedCompanies = parseCSV(csvContent);\n      console.log('Emergency fallback loaded', parsedCompanies.length, 'companies');\n      return parsedCompanies;\n    } catch (fallbackError) {\n      console.error('Emergency fallback also failed:', fallbackError);\n      return [];\n    }\n  }\n};\n\n// Start with empty array - components will load CSV data on mount\nexport const allCompanies = [];\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}