{"ast":null,"code":"// CSV Migration utility\n// Migrates data from the CSV file to Supabase\n\nimport { parseCSV } from './csvParser';\nimport { saveCompaniesToStorage } from './dataStorage';\nimport { supabase, COMPANIES_TABLE, isSupabaseConfigured } from '../config/supabase';\n\n// Function to migrate CSV data to Supabase\nexport const migrateCsvToSupabase = async () => {\n  if (!isSupabaseConfigured()) {\n    console.error('Supabase is not configured. Please set up your Supabase credentials first.');\n    return {\n      success: false,\n      error: 'Supabase not configured'\n    };\n  }\n  try {\n    console.log('Starting CSV migration to Supabase...');\n\n    // Step 1: Load and parse CSV data\n    console.log('Loading CSV data...');\n    const csvData = await fetch('/mc-network.csv');\n    const csvText = await csvData.text();\n    const companies = parseCSV(csvText);\n    console.log('Parsed', companies.length, 'companies from CSV');\n\n    // Step 2: Check if table already has data\n    const {\n      count\n    } = await supabase.from(COMPANIES_TABLE).select('id', {\n      count: 'exact'\n    }).limit(1);\n    if (count > 0) {\n      console.log('Table already has', count, 'records. Migration may overwrite existing data.');\n    }\n\n    // Step 3: Convert to Supabase format and save\n    console.log('Converting data to Supabase format...');\n    const supabaseCompanies = companies.map(company => ({\n      name: company.name,\n      logo: company.logo || '',\n      images: company.images || [],\n      header_image: company.headerImage || '',\n      tagline: company.tagline || '',\n      description: company.description || '',\n      detroit_story: company.detroitStory || '',\n      funding: company.funding || '',\n      industry: company.industry || [],\n      website: company.website || ''\n    }));\n\n    // Step 4: Batch insert to Supabase\n    console.log('Inserting companies into Supabase...');\n    const batchSize = 100; // Insert in batches to avoid timeout\n    let totalInserted = 0;\n    for (let i = 0; i < supabaseCompanies.length; i += batchSize) {\n      const batch = supabaseCompanies.slice(i, i + batchSize);\n      const {\n        data,\n        error\n      } = await supabase.from(COMPANIES_TABLE).upsert(batch, {\n        onConflict: 'id'\n      }).select();\n      if (error) {\n        console.error('Error inserting batch:', error);\n        return {\n          success: false,\n          error: error.message,\n          inserted: totalInserted\n        };\n      }\n      totalInserted += data.length;\n      console.log('Inserted batch', Math.floor(i / batchSize) + 1, '- Total:', totalInserted);\n    }\n    console.log('Migration completed! Inserted', totalInserted, 'companies.');\n    return {\n      success: true,\n      inserted: totalInserted,\n      total: companies.length\n    };\n  } catch (error) {\n    console.error('Migration failed:', error);\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n};\n\n// Function to export Supabase data back to CSV\nexport const exportSupabaseToCSV = async () => {\n  if (!isSupabaseConfigured()) {\n    console.error('Supabase is not configured.');\n    return null;\n  }\n  try {\n    console.log('Exporting Supabase data to CSV...');\n    const {\n      data,\n      error\n    } = await supabase.from(COMPANIES_TABLE).select('*').order('name');\n    if (error) {\n      console.error('Error fetching data from Supabase:', error);\n      return null;\n    }\n\n    // Convert back to CSV format\n    const csvHeader = \"Company Name,Logo URL,Photo URL,Header Image URL,Tagline,Description,Detroit's story,Funding Stage,Industry,Industry 2,Industry 3,Website URL\";\n    const csvRows = data.map(company => {\n      const industries = company.industry || [];\n      const images = company.images || [];\n      return [company.name || '', company.logo || '', images[0] || '', company.header_image || '', company.tagline || '', company.description || '', company.detroit_story || '', company.funding || '', industries[0] || '', industries[1] || '', industries[2] || '', company.website || ''].map(field => \"\\\"\".concat((field || '').replace(/\"/g, '\"\"'), \"\\\"\")).join(',');\n    });\n    const csvContent = [csvHeader].concat(csvRows).join('\\n');\n    console.log('Exported', data.length, 'companies to CSV format');\n    return csvContent;\n  } catch (error) {\n    console.error('Export failed:', error);\n    return null;\n  }\n};\n\n// Function to clear all data and re-import from CSV\nexport const resetToCSV = async () => {\n  if (!isSupabaseConfigured()) {\n    console.error('Supabase is not configured.');\n    return {\n      success: false,\n      error: 'Supabase not configured'\n    };\n  }\n  try {\n    console.log('Resetting database to CSV data...');\n\n    // Step 1: Clear all existing data\n    console.log('Clearing existing data...');\n    const {\n      error: deleteError\n    } = await supabase.from(COMPANIES_TABLE).delete().neq('id', 0); // Delete all records\n\n    if (deleteError) {\n      console.error('Error clearing data:', deleteError);\n      return {\n        success: false,\n        error: deleteError.message\n      };\n    }\n\n    // Step 2: Re-import from CSV\n    const result = await migrateCsvToSupabase();\n    if (result.success) {\n      console.log('Database reset completed!');\n    }\n    return result;\n  } catch (error) {\n    console.error('Reset failed:', error);\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n};\n\n// Utility to check migration status\nexport const checkMigrationStatus = async () => {\n  if (!isSupabaseConfigured()) {\n    return {\n      configured: false\n    };\n  }\n  try {\n    // Check CSV data\n    const csvData = await fetch('/mc-network.csv');\n    const csvText = await csvData.text();\n    const csvCompanies = parseCSV(csvText);\n\n    // Check Supabase data\n    const {\n      data,\n      error,\n      count\n    } = await supabase.from(COMPANIES_TABLE).select('name', {\n      count: 'exact'\n    }).limit(1);\n    if (error) {\n      return {\n        configured: true,\n        tableExists: false,\n        csvCount: csvCompanies.length,\n        supabaseCount: 0,\n        needsMigration: true\n      };\n    }\n    return {\n      configured: true,\n      tableExists: true,\n      csvCount: csvCompanies.length,\n      supabaseCount: count,\n      needsMigration: count === 0,\n      isInSync: count === csvCompanies.length\n    };\n  } catch (error) {\n    console.error('Error checking migration status:', error);\n    return {\n      configured: true,\n      error: error.message\n    };\n  }\n};","map":{"version":3,"names":["parseCSV","saveCompaniesToStorage","supabase","COMPANIES_TABLE","isSupabaseConfigured","migrateCsvToSupabase","console","error","success","log","csvData","fetch","csvText","text","companies","length","count","from","select","limit","supabaseCompanies","map","company","name","logo","images","header_image","headerImage","tagline","description","detroit_story","detroitStory","funding","industry","website","batchSize","totalInserted","i","batch","slice","data","upsert","onConflict","message","inserted","Math","floor","total","exportSupabaseToCSV","order","csvHeader","csvRows","industries","field","concat","replace","join","csvContent","resetToCSV","deleteError","delete","neq","result","checkMigrationStatus","configured","csvCompanies","tableExists","csvCount","supabaseCount","needsMigration","isInSync"],"sources":["/Users/pablognecco/Dropbox (Personal)/Studio/Civic/pitch/framer-motion-bubbles/src/utils/csvMigration.js"],"sourcesContent":["// CSV Migration utility\n// Migrates data from the CSV file to Supabase\n\nimport { parseCSV } from './csvParser';\nimport { saveCompaniesToStorage } from './dataStorage';\nimport { supabase, COMPANIES_TABLE, isSupabaseConfigured } from '../config/supabase';\n\n// Function to migrate CSV data to Supabase\nexport const migrateCsvToSupabase = async () => {\n  if (!isSupabaseConfigured()) {\n    console.error('Supabase is not configured. Please set up your Supabase credentials first.');\n    return { success: false, error: 'Supabase not configured' };\n  }\n\n  try {\n    console.log('Starting CSV migration to Supabase...');\n    \n    // Step 1: Load and parse CSV data\n    console.log('Loading CSV data...');\n    const csvData = await fetch('/mc-network.csv');\n    const csvText = await csvData.text();\n    const companies = parseCSV(csvText);\n    \n    console.log('Parsed', companies.length, 'companies from CSV');\n\n    // Step 2: Check if table already has data\n    const { count } = await supabase\n      .from(COMPANIES_TABLE)\n      .select('id', { count: 'exact' })\n      .limit(1);\n\n    if (count > 0) {\n      console.log('Table already has', count, 'records. Migration may overwrite existing data.');\n    }\n\n    // Step 3: Convert to Supabase format and save\n    console.log('Converting data to Supabase format...');\n    const supabaseCompanies = companies.map(company => ({\n      name: company.name,\n      logo: company.logo || '',\n      images: company.images || [],\n      header_image: company.headerImage || '',\n      tagline: company.tagline || '',\n      description: company.description || '',\n      detroit_story: company.detroitStory || '',\n      funding: company.funding || '',\n      industry: company.industry || [],\n      website: company.website || ''\n    }));\n\n    // Step 4: Batch insert to Supabase\n    console.log('Inserting companies into Supabase...');\n    const batchSize = 100; // Insert in batches to avoid timeout\n    let totalInserted = 0;\n    \n    for (let i = 0; i < supabaseCompanies.length; i += batchSize) {\n      const batch = supabaseCompanies.slice(i, i + batchSize);\n      \n      const { data, error } = await supabase\n        .from(COMPANIES_TABLE)\n        .upsert(batch, { onConflict: 'id' })\n        .select();\n\n      if (error) {\n        console.error('Error inserting batch:', error);\n        return { \n          success: false, \n          error: error.message,\n          inserted: totalInserted \n        };\n      }\n\n      totalInserted += data.length;\n      console.log('Inserted batch', Math.floor(i / batchSize) + 1, '- Total:', totalInserted);\n    }\n\n    console.log('Migration completed! Inserted', totalInserted, 'companies.');\n    \n    return { \n      success: true, \n      inserted: totalInserted,\n      total: companies.length \n    };\n\n  } catch (error) {\n    console.error('Migration failed:', error);\n    return { \n      success: false, \n      error: error.message \n    };\n  }\n};\n\n// Function to export Supabase data back to CSV\nexport const exportSupabaseToCSV = async () => {\n  if (!isSupabaseConfigured()) {\n    console.error('Supabase is not configured.');\n    return null;\n  }\n\n  try {\n    console.log('Exporting Supabase data to CSV...');\n    \n    const { data, error } = await supabase\n      .from(COMPANIES_TABLE)\n      .select('*')\n      .order('name');\n\n    if (error) {\n      console.error('Error fetching data from Supabase:', error);\n      return null;\n    }\n\n    // Convert back to CSV format\n    const csvHeader = \"Company Name,Logo URL,Photo URL,Header Image URL,Tagline,Description,Detroit's story,Funding Stage,Industry,Industry 2,Industry 3,Website URL\";\n    \n    const csvRows = data.map(company => {\n      const industries = company.industry || [];\n      const images = company.images || [];\n      \n      return [\n        company.name || '',\n        company.logo || '',\n        images[0] || '',\n        company.header_image || '',\n        company.tagline || '',\n        company.description || '',\n        company.detroit_story || '',\n        company.funding || '',\n        industries[0] || '',\n        industries[1] || '',\n        industries[2] || '',\n        company.website || ''\n      ].map(field => `\"${(field || '').replace(/\"/g, '\"\"')}\"`).join(',');\n    });\n\n    const csvContent = [csvHeader].concat(csvRows).join('\\n');\n    \n    console.log('Exported', data.length, 'companies to CSV format');\n    return csvContent;\n\n  } catch (error) {\n    console.error('Export failed:', error);\n    return null;\n  }\n};\n\n// Function to clear all data and re-import from CSV\nexport const resetToCSV = async () => {\n  if (!isSupabaseConfigured()) {\n    console.error('Supabase is not configured.');\n    return { success: false, error: 'Supabase not configured' };\n  }\n\n  try {\n    console.log('Resetting database to CSV data...');\n    \n    // Step 1: Clear all existing data\n    console.log('Clearing existing data...');\n    const { error: deleteError } = await supabase\n      .from(COMPANIES_TABLE)\n      .delete()\n      .neq('id', 0); // Delete all records\n\n    if (deleteError) {\n      console.error('Error clearing data:', deleteError);\n      return { success: false, error: deleteError.message };\n    }\n\n    // Step 2: Re-import from CSV\n    const result = await migrateCsvToSupabase();\n    \n    if (result.success) {\n      console.log('Database reset completed!');\n    }\n    \n    return result;\n\n  } catch (error) {\n    console.error('Reset failed:', error);\n    return { success: false, error: error.message };\n  }\n};\n\n// Utility to check migration status\nexport const checkMigrationStatus = async () => {\n  if (!isSupabaseConfigured()) {\n    return { configured: false };\n  }\n\n  try {\n    // Check CSV data\n    const csvData = await fetch('/mc-network.csv');\n    const csvText = await csvData.text();\n    const csvCompanies = parseCSV(csvText);\n\n    // Check Supabase data\n    const { data, error, count } = await supabase\n      .from(COMPANIES_TABLE)\n      .select('name', { count: 'exact' })\n      .limit(1);\n\n    if (error) {\n      return {\n        configured: true,\n        tableExists: false,\n        csvCount: csvCompanies.length,\n        supabaseCount: 0,\n        needsMigration: true\n      };\n    }\n\n    return {\n      configured: true,\n      tableExists: true,\n      csvCount: csvCompanies.length,\n      supabaseCount: count,\n      needsMigration: count === 0,\n      isInSync: count === csvCompanies.length\n    };\n\n  } catch (error) {\n    console.error('Error checking migration status:', error);\n    return { configured: true, error: error.message };\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}