{"ast":null,"code":"import _objectSpread from \"/Users/pablognecco/Dropbox (Personal)/Studio/Civic/pitch/framer-motion-bubbles/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _jsxFileName = \"/Users/pablognecco/Dropbox (Personal)/Studio/Civic/pitch/framer-motion-bubbles/src/components/CompanyImage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { getEmojiPlaceholder } from '../utils/emojiPlaceholders';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CompanyImage = _ref => {\n  _s();\n  let {\n    company,\n    imageType = 'logo',\n    style,\n    className\n  } = _ref;\n  const [imageSrc, setImageSrc] = useState('');\n  const [showFallback, setShowFallback] = useState(false);\n  useEffect(() => {\n    // We assume the most common image extensions.\n    const extensions = ['png', 'jpg', 'jpeg', 'svg', 'webp'];\n    const basePath = \"/images/companies/\".concat(imageType, \"s/\").concat(company.id);\n\n    // Find the first valid image source\n    let foundSrc = null;\n    for (const ext of extensions) {\n      const potentialSrc = \"\".concat(basePath, \".\").concat(ext);\n      // For this simple setup, we'll just try the first one that seems plausible.\n      // A more robust solution might involve a fetch() to check existence.\n      if (!foundSrc) {\n        // For now, let's just construct a preferred path. \n        // The onError will handle if it's missing.\n        // We'll prefer .png for logos and .jpg for photos as a convention.\n        if (imageType === 'logo') {\n          foundSrc = \"\".concat(basePath, \".png\");\n        } else {\n          foundSrc = \"\".concat(basePath, \".jpg\");\n        }\n      }\n    }\n\n    // Fallback to the original URL if no local path is constructed\n    setImageSrc(foundSrc || (imageType === 'logo' ? company.logo : company.headerImage));\n    setShowFallback(false); // Reset fallback state on company change\n  }, [company, imageType]);\n  const handleError = () => {\n    setShowFallback(true);\n  };\n  if (showFallback || !imageSrc) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: _objectSpread(_objectSpread({}, style), {}, {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        backgroundColor: 'var(--bg-secondary)',\n        fontSize: style && style.height ? style.height / 2 : '24px',\n        // Estimate font size from height\n        userSelect: 'none'\n      }),\n      className: className,\n      children: getEmojiPlaceholder(company)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"img\", {\n    src: imageSrc,\n    alt: \"\".concat(company.name, \" \").concat(imageType),\n    style: style,\n    className: className,\n    onError: handleError\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(CompanyImage, \"SXahWcLryPGhTV3Id76idaovgFU=\");\n_c = CompanyImage;\nexport default CompanyImage;\nvar _c;\n$RefreshReg$(_c, \"CompanyImage\");","map":{"version":3,"names":["React","useState","useEffect","getEmojiPlaceholder","jsxDEV","_jsxDEV","CompanyImage","_ref","_s","company","imageType","style","className","imageSrc","setImageSrc","showFallback","setShowFallback","extensions","basePath","concat","id","foundSrc","ext","potentialSrc","logo","headerImage","handleError","_objectSpread","display","alignItems","justifyContent","backgroundColor","fontSize","height","userSelect","children","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","name","onError","_c","$RefreshReg$"],"sources":["/Users/pablognecco/Dropbox (Personal)/Studio/Civic/pitch/framer-motion-bubbles/src/components/CompanyImage.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { getEmojiPlaceholder } from '../utils/emojiPlaceholders';\n\nconst CompanyImage = ({ company, imageType = 'logo', style, className }) => {\n  const [imageSrc, setImageSrc] = useState('');\n  const [showFallback, setShowFallback] = useState(false);\n\n  useEffect(() => {\n    // We assume the most common image extensions.\n    const extensions = ['png', 'jpg', 'jpeg', 'svg', 'webp'];\n    const basePath = `/images/companies/${imageType}s/${company.id}`;\n    \n    // Find the first valid image source\n    let foundSrc = null;\n    for (const ext of extensions) {\n        const potentialSrc = `${basePath}.${ext}`;\n        // For this simple setup, we'll just try the first one that seems plausible.\n        // A more robust solution might involve a fetch() to check existence.\n        if (!foundSrc) {\n            // For now, let's just construct a preferred path. \n            // The onError will handle if it's missing.\n            // We'll prefer .png for logos and .jpg for photos as a convention.\n            if (imageType === 'logo') {\n                foundSrc = `${basePath}.png`;\n            } else {\n                foundSrc = `${basePath}.jpg`;\n            }\n        }\n    }\n\n    // Fallback to the original URL if no local path is constructed\n    setImageSrc(foundSrc || (imageType === 'logo' ? company.logo : company.headerImage));\n    setShowFallback(false); // Reset fallback state on company change\n\n  }, [company, imageType]);\n\n  const handleError = () => {\n    setShowFallback(true);\n  };\n\n  if (showFallback || !imageSrc) {\n    return (\n      <div\n        style={{\n          ...style,\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          backgroundColor: 'var(--bg-secondary)',\n          fontSize: (style && style.height) ? style.height / 2 : '24px', // Estimate font size from height\n          userSelect: 'none'\n        }}\n        className={className}\n      >\n        {getEmojiPlaceholder(company)}\n      </div>\n    );\n  }\n\n  return (\n    <img\n      src={imageSrc}\n      alt={`${company.name} ${imageType}`}\n      style={style}\n      className={className}\n      onError={handleError}\n    />\n  );\n};\n\nexport default CompanyImage;\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,mBAAmB,QAAQ,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjE,MAAMC,YAAY,GAAGC,IAAA,IAAuD;EAAAC,EAAA;EAAA,IAAtD;IAAEC,OAAO;IAAEC,SAAS,GAAG,MAAM;IAAEC,KAAK;IAAEC;EAAU,CAAC,GAAAL,IAAA;EACrE,MAAM,CAACM,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACc,YAAY,EAAEC,eAAe,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EAEvDC,SAAS,CAAC,MAAM;IACd;IACA,MAAMe,UAAU,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,CAAC;IACxD,MAAMC,QAAQ,wBAAAC,MAAA,CAAwBT,SAAS,QAAAS,MAAA,CAAKV,OAAO,CAACW,EAAE,CAAE;;IAEhE;IACA,IAAIC,QAAQ,GAAG,IAAI;IACnB,KAAK,MAAMC,GAAG,IAAIL,UAAU,EAAE;MAC1B,MAAMM,YAAY,MAAAJ,MAAA,CAAMD,QAAQ,OAAAC,MAAA,CAAIG,GAAG,CAAE;MACzC;MACA;MACA,IAAI,CAACD,QAAQ,EAAE;QACX;QACA;QACA;QACA,IAAIX,SAAS,KAAK,MAAM,EAAE;UACtBW,QAAQ,MAAAF,MAAA,CAAMD,QAAQ,SAAM;QAChC,CAAC,MAAM;UACHG,QAAQ,MAAAF,MAAA,CAAMD,QAAQ,SAAM;QAChC;MACJ;IACJ;;IAEA;IACAJ,WAAW,CAACO,QAAQ,KAAKX,SAAS,KAAK,MAAM,GAAGD,OAAO,CAACe,IAAI,GAAGf,OAAO,CAACgB,WAAW,CAAC,CAAC;IACpFT,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC;EAE1B,CAAC,EAAE,CAACP,OAAO,EAAEC,SAAS,CAAC,CAAC;EAExB,MAAMgB,WAAW,GAAGA,CAAA,KAAM;IACxBV,eAAe,CAAC,IAAI,CAAC;EACvB,CAAC;EAED,IAAID,YAAY,IAAI,CAACF,QAAQ,EAAE;IAC7B,oBACER,OAAA;MACEM,KAAK,EAAAgB,aAAA,CAAAA,aAAA,KACAhB,KAAK;QACRiB,OAAO,EAAE,MAAM;QACfC,UAAU,EAAE,QAAQ;QACpBC,cAAc,EAAE,QAAQ;QACxBC,eAAe,EAAE,qBAAqB;QACtCC,QAAQ,EAAGrB,KAAK,IAAIA,KAAK,CAACsB,MAAM,GAAItB,KAAK,CAACsB,MAAM,GAAG,CAAC,GAAG,MAAM;QAAE;QAC/DC,UAAU,EAAE;MAAM,EAClB;MACFtB,SAAS,EAAEA,SAAU;MAAAuB,QAAA,EAEpBhC,mBAAmB,CAACM,OAAO;IAAC;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1B,CAAC;EAEV;EAEA,oBACElC,OAAA;IACEmC,GAAG,EAAE3B,QAAS;IACd4B,GAAG,KAAAtB,MAAA,CAAKV,OAAO,CAACiC,IAAI,OAAAvB,MAAA,CAAIT,SAAS,CAAG;IACpCC,KAAK,EAAEA,KAAM;IACbC,SAAS,EAAEA,SAAU;IACrB+B,OAAO,EAAEjB;EAAY;IAAAU,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtB,CAAC;AAEN,CAAC;AAAC/B,EAAA,CAjEIF,YAAY;AAAAsC,EAAA,GAAZtC,YAAY;AAmElB,eAAeA,YAAY;AAAC,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}