{"ast":null,"code":"// Centralized data storage for company information\n// Uses Supabase for persistent cloud storage with real-time updates\n\nimport { supabase, COMPANIES_TABLE, isSupabaseConfigured } from '../config/supabase';\n\n// Fallback to localStorage if Supabase is not configured\nconst STORAGE_KEY = 'admin_companies';\nconst VERSION_KEY = 'admin_data_version';\n\n// Save a single company to Supabase\nexport const saveCompanyToSupabase = async company => {\n  if (!isSupabaseConfigured()) {\n    console.warn('Supabase not configured, falling back to localStorage');\n    return false;\n  }\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from(COMPANIES_TABLE).upsert([{\n      name: company.name,\n      logo: company.logo || '',\n      images: company.images || [],\n      header_image: company.headerImage || '',\n      tagline: company.tagline || '',\n      description: company.description || '',\n      detroit_story: company.detroitStory || '',\n      funding: company.funding || '',\n      industry: company.industry || [],\n      website: company.website || '',\n      created_at: company.id ? undefined : new Date().toISOString(),\n      updated_at: new Date().toISOString()\n    }], {\n      onConflict: 'name'\n    }).select();\n    if (error) {\n      console.error('Error saving company to Supabase:', error);\n      return false;\n    }\n    console.log('Successfully saved company to Supabase:', company.name);\n    return data[0];\n  } catch (error) {\n    console.error('Failed to save company to Supabase:', error);\n    return false;\n  }\n};\n\n// Save all companies to Supabase (bulk operation)\nexport const saveCompaniesToStorage = async companies => {\n  if (!isSupabaseConfigured()) {\n    // Fallback to localStorage\n    return saveCompaniesToLocalStorage(companies);\n  }\n  try {\n    // Convert companies to Supabase format\n    const supabaseCompanies = companies.map(company => ({\n      name: company.name,\n      logo: company.logo || '',\n      images: company.images || [],\n      header_image: company.headerImage || '',\n      tagline: company.tagline || '',\n      description: company.description || '',\n      detroit_story: company.detroitStory || '',\n      funding: company.funding || '',\n      industry: company.industry || [],\n      website: company.website || '',\n      updated_at: new Date().toISOString()\n    }));\n    const {\n      data,\n      error\n    } = await supabase.from(COMPANIES_TABLE).upsert(supabaseCompanies, {\n      onConflict: 'name'\n    }).select();\n    if (error) {\n      console.error('Error saving companies to Supabase:', error);\n      return false;\n    }\n    console.log('Successfully saved', companies.length, 'companies to Supabase');\n\n    // Trigger custom event for real-time updates\n    window.dispatchEvent(new CustomEvent('supabase-data-change', {\n      detail: {\n        type: 'bulk-update',\n        companies: data\n      }\n    }));\n    return true;\n  } catch (error) {\n    console.error('Failed to save companies to Supabase:', error);\n    return false;\n  }\n};\n\n// localStorage fallback function\nconst saveCompaniesToLocalStorage = companies => {\n  try {\n    const dataToSave = {\n      companies: companies,\n      timestamp: Date.now(),\n      version: Date.now()\n    };\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(dataToSave));\n    localStorage.setItem(VERSION_KEY, dataToSave.version.toString());\n    console.log('Saved', companies.length, 'companies to localStorage (fallback)');\n\n    // Trigger storage event for other tabs/windows\n    window.dispatchEvent(new StorageEvent('storage', {\n      key: STORAGE_KEY,\n      newValue: JSON.stringify(dataToSave),\n      storageArea: localStorage\n    }));\n    return true;\n  } catch (error) {\n    console.error('Failed to save companies to localStorage:', error);\n    return false;\n  }\n};\n\n// Load companies from Supabase\nexport const loadCompaniesFromStorage = async () => {\n  if (!isSupabaseConfigured()) {\n    // Fallback to localStorage\n    return loadCompaniesFromLocalStorage();\n  }\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from(COMPANIES_TABLE).select('*').order('name');\n    if (error) {\n      console.error('Error loading companies from Supabase:', error);\n      // Fallback to localStorage\n      return loadCompaniesFromLocalStorage();\n    }\n\n    // Convert Supabase format back to app format\n    const companies = data.map(company => ({\n      id: company.id || company.name.toLowerCase().replace(/[^a-z0-9]/g, '-').replace(/-+/g, '-').replace(/^-|-$/g, ''),\n      name: company.name,\n      logo: company.logo,\n      images: company.images || [],\n      headerImage: company.header_image,\n      tagline: company.tagline,\n      description: company.description,\n      detroitStory: company.detroit_story,\n      funding: company.funding,\n      industry: company.industry || [],\n      website: company.website\n    }));\n    console.log('Loaded', companies.length, 'companies from Supabase');\n    return companies;\n  } catch (error) {\n    console.error('Failed to load companies from Supabase:', error);\n    // Fallback to localStorage\n    return loadCompaniesFromLocalStorage();\n  }\n};\n\n// localStorage fallback function\nconst loadCompaniesFromLocalStorage = () => {\n  try {\n    const stored = localStorage.getItem(STORAGE_KEY);\n    if (!stored) {\n      return null;\n    }\n    const data = JSON.parse(stored);\n    console.log('Loaded', data.companies.length, 'companies from localStorage (fallback)');\n    return data.companies;\n  } catch (error) {\n    console.error('Failed to load companies from localStorage:', error);\n    return null;\n  }\n};\n\n// Delete a company from Supabase\nexport const deleteCompanyFromStorage = async companyName => {\n  if (!isSupabaseConfigured()) {\n    console.warn('Supabase not configured, cannot delete from database');\n    return false;\n  }\n  try {\n    const {\n      error\n    } = await supabase.from(COMPANIES_TABLE).delete().eq('name', companyName);\n    if (error) {\n      console.error('Error deleting company from Supabase:', error);\n      return false;\n    }\n    console.log('Successfully deleted company from Supabase:', companyName);\n\n    // Trigger custom event for real-time updates\n    window.dispatchEvent(new CustomEvent('supabase-data-change', {\n      detail: {\n        type: 'delete',\n        companyName\n      }\n    }));\n    return true;\n  } catch (error) {\n    console.error('Failed to delete company from Supabase:', error);\n    return false;\n  }\n};\n\n// Check if admin has made changes (for Supabase, always return false since data is live)\nexport const hasAdminChanges = () => {\n  if (isSupabaseConfigured()) {\n    return false; // With Supabase, changes are automatically saved\n  }\n  return localStorage.getItem(STORAGE_KEY) !== null;\n};\n\n// Clear admin changes and revert to CSV\nexport const clearAdminChanges = async () => {\n  if (isSupabaseConfigured()) {\n    // For Supabase, we need to clear all data and re-import from CSV\n    try {\n      const {\n        error\n      } = await supabase.from(COMPANIES_TABLE).delete().neq('id', 0); // Delete all records\n\n      if (error) {\n        console.error('Error clearing companies from Supabase:', error);\n        return false;\n      }\n      console.log('Cleared all companies from Supabase');\n\n      // Trigger custom event for real-time updates\n      window.dispatchEvent(new CustomEvent('supabase-data-change', {\n        detail: {\n          type: 'clear'\n        }\n      }));\n      return true;\n    } catch (error) {\n      console.error('Failed to clear companies from Supabase:', error);\n      return false;\n    }\n  } else {\n    // Fallback to localStorage\n    try {\n      localStorage.removeItem(STORAGE_KEY);\n      localStorage.removeItem(VERSION_KEY);\n\n      // Trigger storage event\n      window.dispatchEvent(new StorageEvent('storage', {\n        key: STORAGE_KEY,\n        newValue: null,\n        storageArea: localStorage\n      }));\n      console.log('Cleared admin changes from localStorage');\n      return true;\n    } catch (error) {\n      console.error('Failed to clear admin changes:', error);\n      return false;\n    }\n  }\n};\n\n// Get current data version (for checking if data has changed)\nexport const getDataVersion = () => {\n  if (isSupabaseConfigured()) {\n    return Date.now().toString(); // For Supabase, always return current time\n  }\n  return localStorage.getItem(VERSION_KEY);\n};\n\n// Subscribe to data changes (for real-time updates)\nexport const subscribeToDataChanges = callback => {\n  if (isSupabaseConfigured()) {\n    // Subscribe to Supabase real-time changes\n    const subscription = supabase.channel('companies_changes').on('postgres_changes', {\n      event: '*',\n      schema: 'public',\n      table: COMPANIES_TABLE\n    }, payload => {\n      console.log('Supabase real-time change:', payload);\n      callback();\n    }).subscribe();\n\n    // Also listen for custom events (for immediate updates)\n    const handleCustomChange = event => {\n      callback();\n    };\n    window.addEventListener('supabase-data-change', handleCustomChange);\n\n    // Return cleanup function\n    return () => {\n      subscription.unsubscribe();\n      window.removeEventListener('supabase-data-change', handleCustomChange);\n    };\n  } else {\n    // Fallback to localStorage events\n    const handleStorageChange = event => {\n      if (event.key === STORAGE_KEY) {\n        callback();\n      }\n    };\n    window.addEventListener('storage', handleStorageChange);\n\n    // Return cleanup function\n    return () => {\n      window.removeEventListener('storage', handleStorageChange);\n    };\n  }\n};","map":{"version":3,"names":["supabase","COMPANIES_TABLE","isSupabaseConfigured","STORAGE_KEY","VERSION_KEY","saveCompanyToSupabase","company","console","warn","data","error","from","upsert","name","logo","images","header_image","headerImage","tagline","description","detroit_story","detroitStory","funding","industry","website","created_at","id","undefined","Date","toISOString","updated_at","onConflict","select","log","saveCompaniesToStorage","companies","saveCompaniesToLocalStorage","supabaseCompanies","map","length","window","dispatchEvent","CustomEvent","detail","type","dataToSave","timestamp","now","version","localStorage","setItem","JSON","stringify","toString","StorageEvent","key","newValue","storageArea","loadCompaniesFromStorage","loadCompaniesFromLocalStorage","order","toLowerCase","replace","stored","getItem","parse","deleteCompanyFromStorage","companyName","delete","eq","hasAdminChanges","clearAdminChanges","neq","removeItem","getDataVersion","subscribeToDataChanges","callback","subscription","channel","on","event","schema","table","payload","subscribe","handleCustomChange","addEventListener","unsubscribe","removeEventListener","handleStorageChange"],"sources":["/Users/pablognecco/Dropbox (Personal)/Studio/Civic/pitch/framer-motion-bubbles/src/utils/dataStorage.js"],"sourcesContent":["// Centralized data storage for company information\n// Uses Supabase for persistent cloud storage with real-time updates\n\nimport { supabase, COMPANIES_TABLE, isSupabaseConfigured } from '../config/supabase';\n\n// Fallback to localStorage if Supabase is not configured\nconst STORAGE_KEY = 'admin_companies';\nconst VERSION_KEY = 'admin_data_version';\n\n// Save a single company to Supabase\nexport const saveCompanyToSupabase = async (company) => {\n  if (!isSupabaseConfigured()) {\n    console.warn('Supabase not configured, falling back to localStorage');\n    return false;\n  }\n\n  try {\n    const { data, error } = await supabase\n      .from(COMPANIES_TABLE)\n      .upsert([{\n        name: company.name,\n        logo: company.logo || '',\n        images: company.images || [],\n        header_image: company.headerImage || '',\n        tagline: company.tagline || '',\n        description: company.description || '',\n        detroit_story: company.detroitStory || '',\n        funding: company.funding || '',\n        industry: company.industry || [],\n        website: company.website || '',\n        created_at: company.id ? undefined : new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      }], {\n        onConflict: 'name'\n      })\n      .select();\n\n    if (error) {\n      console.error('Error saving company to Supabase:', error);\n      return false;\n    }\n\n    console.log('Successfully saved company to Supabase:', company.name);\n    return data[0];\n  } catch (error) {\n    console.error('Failed to save company to Supabase:', error);\n    return false;\n  }\n};\n\n// Save all companies to Supabase (bulk operation)\nexport const saveCompaniesToStorage = async (companies) => {\n  if (!isSupabaseConfigured()) {\n    // Fallback to localStorage\n    return saveCompaniesToLocalStorage(companies);\n  }\n\n  try {\n    // Convert companies to Supabase format\n    const supabaseCompanies = companies.map(company => ({\n      name: company.name,\n      logo: company.logo || '',\n      images: company.images || [],\n      header_image: company.headerImage || '',\n      tagline: company.tagline || '',\n      description: company.description || '',\n      detroit_story: company.detroitStory || '',\n      funding: company.funding || '',\n      industry: company.industry || [],\n      website: company.website || '',\n      updated_at: new Date().toISOString()\n    }));\n\n    const { data, error } = await supabase\n      .from(COMPANIES_TABLE)\n      .upsert(supabaseCompanies, {\n        onConflict: 'name'\n      })\n      .select();\n\n    if (error) {\n      console.error('Error saving companies to Supabase:', error);\n      return false;\n    }\n\n    console.log('Successfully saved', companies.length, 'companies to Supabase');\n    \n    // Trigger custom event for real-time updates\n    window.dispatchEvent(new CustomEvent('supabase-data-change', {\n      detail: { type: 'bulk-update', companies: data }\n    }));\n    \n    return true;\n  } catch (error) {\n    console.error('Failed to save companies to Supabase:', error);\n    return false;\n  }\n};\n\n// localStorage fallback function\nconst saveCompaniesToLocalStorage = (companies) => {\n  try {\n    const dataToSave = {\n      companies: companies,\n      timestamp: Date.now(),\n      version: Date.now()\n    };\n    \n    localStorage.setItem(STORAGE_KEY, JSON.stringify(dataToSave));\n    localStorage.setItem(VERSION_KEY, dataToSave.version.toString());\n    \n    console.log('Saved', companies.length, 'companies to localStorage (fallback)');\n    \n    // Trigger storage event for other tabs/windows\n    window.dispatchEvent(new StorageEvent('storage', {\n      key: STORAGE_KEY,\n      newValue: JSON.stringify(dataToSave),\n      storageArea: localStorage\n    }));\n    \n    return true;\n  } catch (error) {\n    console.error('Failed to save companies to localStorage:', error);\n    return false;\n  }\n};\n\n// Load companies from Supabase\nexport const loadCompaniesFromStorage = async () => {\n  if (!isSupabaseConfigured()) {\n    // Fallback to localStorage\n    return loadCompaniesFromLocalStorage();\n  }\n\n  try {\n    const { data, error } = await supabase\n      .from(COMPANIES_TABLE)\n      .select('*')\n      .order('name');\n\n    if (error) {\n      console.error('Error loading companies from Supabase:', error);\n      // Fallback to localStorage\n      return loadCompaniesFromLocalStorage();\n    }\n\n    // Convert Supabase format back to app format\n    const companies = data.map(company => ({\n      id: company.id || company.name.toLowerCase().replace(/[^a-z0-9]/g, '-').replace(/-+/g, '-').replace(/^-|-$/g, ''),\n      name: company.name,\n      logo: company.logo,\n      images: company.images || [],\n      headerImage: company.header_image,\n      tagline: company.tagline,\n      description: company.description,\n      detroitStory: company.detroit_story,\n      funding: company.funding,\n      industry: company.industry || [],\n      website: company.website\n    }));\n\n    console.log('Loaded', companies.length, 'companies from Supabase');\n    return companies;\n  } catch (error) {\n    console.error('Failed to load companies from Supabase:', error);\n    // Fallback to localStorage\n    return loadCompaniesFromLocalStorage();\n  }\n};\n\n// localStorage fallback function\nconst loadCompaniesFromLocalStorage = () => {\n  try {\n    const stored = localStorage.getItem(STORAGE_KEY);\n    if (!stored) {\n      return null;\n    }\n    \n    const data = JSON.parse(stored);\n    console.log('Loaded', data.companies.length, 'companies from localStorage (fallback)');\n    return data.companies;\n  } catch (error) {\n    console.error('Failed to load companies from localStorage:', error);\n    return null;\n  }\n};\n\n// Delete a company from Supabase\nexport const deleteCompanyFromStorage = async (companyName) => {\n  if (!isSupabaseConfigured()) {\n    console.warn('Supabase not configured, cannot delete from database');\n    return false;\n  }\n\n  try {\n    const { error } = await supabase\n      .from(COMPANIES_TABLE)\n      .delete()\n      .eq('name', companyName);\n\n    if (error) {\n      console.error('Error deleting company from Supabase:', error);\n      return false;\n    }\n\n    console.log('Successfully deleted company from Supabase:', companyName);\n    \n    // Trigger custom event for real-time updates\n    window.dispatchEvent(new CustomEvent('supabase-data-change', {\n      detail: { type: 'delete', companyName }\n    }));\n    \n    return true;\n  } catch (error) {\n    console.error('Failed to delete company from Supabase:', error);\n    return false;\n  }\n};\n\n// Check if admin has made changes (for Supabase, always return false since data is live)\nexport const hasAdminChanges = () => {\n  if (isSupabaseConfigured()) {\n    return false; // With Supabase, changes are automatically saved\n  }\n  return localStorage.getItem(STORAGE_KEY) !== null;\n};\n\n// Clear admin changes and revert to CSV\nexport const clearAdminChanges = async () => {\n  if (isSupabaseConfigured()) {\n    // For Supabase, we need to clear all data and re-import from CSV\n    try {\n      const { error } = await supabase\n        .from(COMPANIES_TABLE)\n        .delete()\n        .neq('id', 0); // Delete all records\n\n      if (error) {\n        console.error('Error clearing companies from Supabase:', error);\n        return false;\n      }\n\n      console.log('Cleared all companies from Supabase');\n      \n      // Trigger custom event for real-time updates\n      window.dispatchEvent(new CustomEvent('supabase-data-change', {\n        detail: { type: 'clear' }\n      }));\n      \n      return true;\n    } catch (error) {\n      console.error('Failed to clear companies from Supabase:', error);\n      return false;\n    }\n  } else {\n    // Fallback to localStorage\n    try {\n      localStorage.removeItem(STORAGE_KEY);\n      localStorage.removeItem(VERSION_KEY);\n      \n      // Trigger storage event\n      window.dispatchEvent(new StorageEvent('storage', {\n        key: STORAGE_KEY,\n        newValue: null,\n        storageArea: localStorage\n      }));\n      \n      console.log('Cleared admin changes from localStorage');\n      return true;\n    } catch (error) {\n      console.error('Failed to clear admin changes:', error);\n      return false;\n    }\n  }\n};\n\n// Get current data version (for checking if data has changed)\nexport const getDataVersion = () => {\n  if (isSupabaseConfigured()) {\n    return Date.now().toString(); // For Supabase, always return current time\n  }\n  return localStorage.getItem(VERSION_KEY);\n};\n\n// Subscribe to data changes (for real-time updates)\nexport const subscribeToDataChanges = (callback) => {\n  if (isSupabaseConfigured()) {\n    // Subscribe to Supabase real-time changes\n    const subscription = supabase\n      .channel('companies_changes')\n      .on('postgres_changes', {\n        event: '*',\n        schema: 'public',\n        table: COMPANIES_TABLE\n      }, (payload) => {\n        console.log('Supabase real-time change:', payload);\n        callback();\n      })\n      .subscribe();\n\n    // Also listen for custom events (for immediate updates)\n    const handleCustomChange = (event) => {\n      callback();\n    };\n    \n    window.addEventListener('supabase-data-change', handleCustomChange);\n    \n    // Return cleanup function\n    return () => {\n      subscription.unsubscribe();\n      window.removeEventListener('supabase-data-change', handleCustomChange);\n    };\n  } else {\n    // Fallback to localStorage events\n    const handleStorageChange = (event) => {\n      if (event.key === STORAGE_KEY) {\n        callback();\n      }\n    };\n    \n    window.addEventListener('storage', handleStorageChange);\n    \n    // Return cleanup function\n    return () => {\n      window.removeEventListener('storage', handleStorageChange);\n    };\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}