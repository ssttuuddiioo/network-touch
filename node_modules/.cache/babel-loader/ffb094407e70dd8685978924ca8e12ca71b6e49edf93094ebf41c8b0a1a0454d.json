{"ast":null,"code":"// CSV Parser for MC-Network data\nexport const parseCSV = csvContent => {\n  const lines = csvContent.trim().split('\\n');\n  if (lines.length < 2) return [];\n\n  // Get headers from first line\n  const headers = lines[0].split(',').map(h => h.trim());\n\n  // Find column indices\n  const nameIndex = headers.findIndex(h => h.toLowerCase().includes('company name'));\n  const logoIndex = headers.findIndex(h => h.toLowerCase().includes('logo url'));\n  const headerImageIndex = headers.findIndex(h => h.toLowerCase().includes('header image'));\n  const qrCodeIndex = headers.findIndex(h => h.toLowerCase().includes('qr code'));\n  const photoIndex = headers.findIndex(h => h.toLowerCase().includes('photo url'));\n  const taglineIndex = headers.findIndex(h => h.toLowerCase().includes('tagline'));\n  const descriptionIndex = headers.findIndex(h => h.toLowerCase().includes('description'));\n  const detroitStoryIndex = headers.findIndex(h => h.toLowerCase().includes('detroit'));\n  const fundingIndex = headers.findIndex(h => h.toLowerCase().includes('funding'));\n  const websiteIndex = headers.findIndex(h => h.toLowerCase().includes('website'));\n\n  // Industry columns (there are multiple)\n  const industryIndices = headers.map((h, i) => h.toLowerCase().includes('industry') ? i : -1).filter(i => i !== -1);\n  const companies = [];\n\n  // Parse each data line (skip header)\n  for (let i = 1; i < lines.length; i++) {\n    const line = lines[i];\n    if (!line.trim()) continue;\n\n    // Split CSV line handling quoted values\n    const columns = parseCSVLine(line);\n    if (columns.length < 2) continue;\n    const name = columns[nameIndex] && columns[nameIndex].trim();\n    if (!name || name === 'Company Name') continue; // Skip empty or header rows\n\n    // Extract industries\n    const industries = industryIndices.map(index => columns[index] && columns[index].trim()).filter(industry => industry && industry !== 'Industry' && industry !== 'Modifiers').slice(0, 3); // Take max 3 industries\n\n    // Create company object\n    const company = {\n      // id: columns[nameIndex].toLowerCase().replace(/[^a-z0-9]/g, '-').replace(/-+/g, '-').replace(/^-|-$/g, ''),\n      name: name,\n      logo: columns[logoIndex] && columns[logoIndex].trim() || getPlaceholderLogo(name),\n      headerImage: columns[headerImageIndex] && columns[headerImageIndex].trim() || getPlaceholderImage(name, 1),\n      qrCode: columns[qrCodeIndex] && columns[qrCodeIndex].trim() || '',\n      tagline: columns[taglineIndex] && columns[taglineIndex].trim() || '',\n      description: columns[descriptionIndex] && columns[descriptionIndex].trim() || 'No description available',\n      detroitStory: columns[detroitStoryIndex] && columns[detroitStoryIndex].trim() || '',\n      funding: columns[fundingIndex] && columns[fundingIndex].trim() || 'Not disclosed',\n      website: columns[websiteIndex] && columns[websiteIndex].trim() || '#',\n      industry: industries.length > 0 ? industries : ['Technology'],\n      images: [columns[photoIndex] && columns[photoIndex].trim() || getPlaceholderImage(name, 1), getPlaceholderImage(name, 2)].filter(img => img),\n      // Remove empty images\n      tags: industries.concat(['Detroit', 'Startup']),\n      employees: getRandomEmployeeCount(),\n      location: 'Detroit, MI',\n      founded: getRandomFoundedYear()\n    };\n    companies.push(company);\n  }\n  console.log(\"Parsed \".concat(companies.length, \" companies from CSV\"));\n  return companies.slice(0, 62); // Limit to 62 companies\n};\n\n// Helper function to parse CSV line with proper quote handling\nconst parseCSVLine = line => {\n  const result = [];\n  let current = '';\n  let inQuotes = false;\n  for (let i = 0; i < line.length; i++) {\n    const char = line[i];\n    if (char === '\"') {\n      inQuotes = !inQuotes;\n    } else if (char === ',' && !inQuotes) {\n      result.push(current);\n      current = '';\n    } else {\n      current += char;\n    }\n  }\n  result.push(current); // Add the last field\n  return result;\n};\n\n// Generate consistent company ID from name\nconst generateCompanyId = name => {\n  return name.toLowerCase().replace(/[^a-z0-9]/g, '-').replace(/-+/g, '-').replace(/^-|-$/g, '');\n};\n\n// Generate placeholder logo URL\nconst getPlaceholderLogo = name => {\n  const colors = ['FAC853', 'FF6B6B', '4ECDC4', '45B7D1', '96C93F', 'FFEAA7'];\n  const colorIndex = name.length % colors.length;\n  const initials = name.split(' ').map(word => word[0]).join('').slice(0, 2).toUpperCase();\n  return \"https://via.placeholder.com/200x200/\".concat(colors[colorIndex], \"/000000?text=\").concat(initials);\n};\n\n// Generate placeholder image URL\nconst getPlaceholderImage = (name, index) => {\n  const colors = ['FF6B6B', '4ECDC4', '45B7D1', '96C93F', 'FFEAA7', 'DDA0DD'];\n  const colorIndex = (name.length + index) % colors.length;\n  return \"https://via.placeholder.com/800x400/\".concat(colors[colorIndex], \"/FFFFFF?text=\").concat(name, \"+\").concat(index);\n};\n\n// Generate random employee count\nconst getRandomEmployeeCount = () => {\n  const ranges = ['1-10', '11-50', '51-200', '201-500', '501-1000'];\n  return ranges[Math.floor(Math.random() * ranges.length)];\n};\n\n// Generate random founded year\nconst getRandomFoundedYear = () => {\n  const currentYear = new Date().getFullYear();\n  const startYear = currentYear - 10; // Companies founded in last 10 years\n  return (startYear + Math.floor(Math.random() * 10)).toString();\n};","map":{"version":3,"names":["parseCSV","csvContent","lines","trim","split","length","headers","map","h","nameIndex","findIndex","toLowerCase","includes","logoIndex","headerImageIndex","qrCodeIndex","photoIndex","taglineIndex","descriptionIndex","detroitStoryIndex","fundingIndex","websiteIndex","industryIndices","i","filter","companies","line","columns","parseCSVLine","name","industries","index","industry","slice","company","logo","getPlaceholderLogo","headerImage","getPlaceholderImage","qrCode","tagline","description","detroitStory","funding","website","images","img","tags","concat","employees","getRandomEmployeeCount","location","founded","getRandomFoundedYear","push","console","log","result","current","inQuotes","char","generateCompanyId","replace","colors","colorIndex","initials","word","join","toUpperCase","ranges","Math","floor","random","currentYear","Date","getFullYear","startYear","toString"],"sources":["/Users/pablognecco/Dropbox (Personal)/Studio/Civic/pitch/framer-motion-bubbles/src/utils/csvParser.js"],"sourcesContent":["// CSV Parser for MC-Network data\nexport const parseCSV = (csvContent) => {\n  const lines = csvContent.trim().split('\\n');\n  if (lines.length < 2) return [];\n\n  // Get headers from first line\n  const headers = lines[0].split(',').map(h => h.trim());\n  \n  // Find column indices\n  const nameIndex = headers.findIndex(h => h.toLowerCase().includes('company name'));\n  const logoIndex = headers.findIndex(h => h.toLowerCase().includes('logo url'));\n  const headerImageIndex = headers.findIndex(h => h.toLowerCase().includes('header image'));\n  const qrCodeIndex = headers.findIndex(h => h.toLowerCase().includes('qr code'));\n  const photoIndex = headers.findIndex(h => h.toLowerCase().includes('photo url'));\n  const taglineIndex = headers.findIndex(h => h.toLowerCase().includes('tagline'));\n  const descriptionIndex = headers.findIndex(h => h.toLowerCase().includes('description'));\n  const detroitStoryIndex = headers.findIndex(h => h.toLowerCase().includes('detroit'));\n  const fundingIndex = headers.findIndex(h => h.toLowerCase().includes('funding'));\n  const websiteIndex = headers.findIndex(h => h.toLowerCase().includes('website'));\n  \n  // Industry columns (there are multiple)\n  const industryIndices = headers.map((h, i) => \n    h.toLowerCase().includes('industry') ? i : -1\n  ).filter(i => i !== -1);\n\n  const companies = [];\n\n  // Parse each data line (skip header)\n  for (let i = 1; i < lines.length; i++) {\n    const line = lines[i];\n    if (!line.trim()) continue;\n\n    // Split CSV line handling quoted values\n    const columns = parseCSVLine(line);\n    \n    if (columns.length < 2) continue;\n\n    const name = columns[nameIndex] && columns[nameIndex].trim();\n    if (!name || name === 'Company Name') continue; // Skip empty or header rows\n\n    // Extract industries\n    const industries = industryIndices\n      .map(index => columns[index] && columns[index].trim())\n      .filter(industry => industry && industry !== 'Industry' && industry !== 'Modifiers')\n      .slice(0, 3); // Take max 3 industries\n\n    // Create company object\n    const company = {\n      // id: columns[nameIndex].toLowerCase().replace(/[^a-z0-9]/g, '-').replace(/-+/g, '-').replace(/^-|-$/g, ''),\n      name: name,\n      logo: (columns[logoIndex] && columns[logoIndex].trim()) || getPlaceholderLogo(name),\n      headerImage: (columns[headerImageIndex] && columns[headerImageIndex].trim()) || getPlaceholderImage(name, 1),\n      qrCode: (columns[qrCodeIndex] && columns[qrCodeIndex].trim()) || '',\n      tagline: (columns[taglineIndex] && columns[taglineIndex].trim()) || '',\n      description: (columns[descriptionIndex] && columns[descriptionIndex].trim()) || 'No description available',\n      detroitStory: (columns[detroitStoryIndex] && columns[detroitStoryIndex].trim()) || '',\n      funding: (columns[fundingIndex] && columns[fundingIndex].trim()) || 'Not disclosed',\n      website: (columns[websiteIndex] && columns[websiteIndex].trim()) || '#',\n      industry: industries.length > 0 ? industries : ['Technology'],\n      images: [\n        (columns[photoIndex] && columns[photoIndex].trim()) || getPlaceholderImage(name, 1),\n        getPlaceholderImage(name, 2)\n      ].filter(img => img), // Remove empty images\n      tags: industries.concat(['Detroit', 'Startup']),\n      employees: getRandomEmployeeCount(),\n      location: 'Detroit, MI',\n      founded: getRandomFoundedYear()\n    };\n\n    companies.push(company);\n  }\n\n  console.log(`Parsed ${companies.length} companies from CSV`);\n  return companies.slice(0, 62); // Limit to 62 companies\n};\n\n// Helper function to parse CSV line with proper quote handling\nconst parseCSVLine = (line) => {\n  const result = [];\n  let current = '';\n  let inQuotes = false;\n  \n  for (let i = 0; i < line.length; i++) {\n    const char = line[i];\n    \n    if (char === '\"') {\n      inQuotes = !inQuotes;\n    } else if (char === ',' && !inQuotes) {\n      result.push(current);\n      current = '';\n    } else {\n      current += char;\n    }\n  }\n  \n  result.push(current); // Add the last field\n  return result;\n};\n\n// Generate consistent company ID from name\nconst generateCompanyId = (name) => {\n  return name.toLowerCase()\n    .replace(/[^a-z0-9]/g, '-')\n    .replace(/-+/g, '-')\n    .replace(/^-|-$/g, '');\n};\n\n// Generate placeholder logo URL\nconst getPlaceholderLogo = (name) => {\n  const colors = ['FAC853', 'FF6B6B', '4ECDC4', '45B7D1', '96C93F', 'FFEAA7'];\n  const colorIndex = name.length % colors.length;\n  const initials = name.split(' ').map(word => word[0]).join('').slice(0, 2).toUpperCase();\n  return `https://via.placeholder.com/200x200/${colors[colorIndex]}/000000?text=${initials}`;\n};\n\n// Generate placeholder image URL\nconst getPlaceholderImage = (name, index) => {\n  const colors = ['FF6B6B', '4ECDC4', '45B7D1', '96C93F', 'FFEAA7', 'DDA0DD'];\n  const colorIndex = (name.length + index) % colors.length;\n  return `https://via.placeholder.com/800x400/${colors[colorIndex]}/FFFFFF?text=${name}+${index}`;\n};\n\n// Generate random employee count\nconst getRandomEmployeeCount = () => {\n  const ranges = ['1-10', '11-50', '51-200', '201-500', '501-1000'];\n  return ranges[Math.floor(Math.random() * ranges.length)];\n};\n\n// Generate random founded year\nconst getRandomFoundedYear = () => {\n  const currentYear = new Date().getFullYear();\n  const startYear = currentYear - 10; // Companies founded in last 10 years\n  return (startYear + Math.floor(Math.random() * 10)).toString();\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}